#!KAMAILIO

####### Global Parameters #########

debug=2
log_stderror=yes
memdbg=5
memlog=5

fork=yes
children=4

listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:8088

alias=localhost

####### Modules Section ########

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
loadmodule "websocket.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "permissions.so"
loadmodule "uac.so"

####### Module Parameters ########

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- rr params -----
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 0)

# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", 7)
modparam("nathelper", "sipping_from", "sip:pinger@localhost")

# ----- websocket params -----
modparam("websocket", "ping_interval", 30)

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "auto_inv_100_reason", "Trying")

####### Routing Logic ########

request_route {
    
    # Per SIP request initial checks
    route(REQINIT);
    
    # Handle WebSocket connections
    if (proto == WS || proto == WSS) {
        xlog("L_INFO", "WebSocket request from $si:$sp\n");
    }
    
    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }
    
    # Handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }
    
    # Record routing for dialog forming requests
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }
    
    # Handle registrations
    if (is_method("REGISTER")) {
        xlog("L_INFO", "REGISTER from $fu (contact: $ct)\n");
        # Accept all registrations (no authentication for simplicity)
        save("location");
        exit;
    }
    
    # Handle INVITE
    if (is_method("INVITE")) {
        xlog("L_INFO", "INVITE from $fu to $ru\n");
        
        # From WebRTC browser
        if (proto == WS || proto == WSS) {
            xlog("L_INFO", "Call from WebRTC client\n");
            
            # Set destination to VOS3000
            $ru = "sip:" + $rU + "@104.248.249.40:5060";
            
            # Set caller ID to registered VOS3000 number
            $fU = "4942139974006";
            
            # Add authentication header for VOS3000
            uac_auth();
            
            # Engage RTPEngine for WebRTC to RTP translation
            rtpengine_offer("RTP/AVP replace-origin replace-session-connection ICE=remove DTLS=off codec-mask-PCMU codec-mask-PCMA");
            
            force_rport();
            route(RELAY);
            exit;
        }
        
        # From VOS3000 (200 OK direction)
        if ($si == "104.248.249.40") {
            xlog("L_INFO", "Response from VOS3000\n");
            route(RELAY);
            exit;
        }
    }
    
    # Default relay
    route(RELAY);
}

# Request URI initial checks
route[REQINIT] {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Relay route
route[RELAY] {
    if (is_method("INVITE")) {
        if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Manage outgoing replies
onreply_route[MANAGE_REPLY] {
    xlog("L_INFO", "Reply: $rs $rr from $si\n");
    
    # Handle 200 OK from VOS3000 to browser
    if (status =~ "200" && $si == "104.248.249.40") {
        xlog("L_INFO", "200 OK from VOS3000, converting RTP to WebRTC\n");
        
        # Engage RTPEngine to convert RTP to WebRTC
        rtpengine_answer("UDP/TLS/RTP/SAVPF replace-origin replace-session-connection ICE=force DTLS=passive");
    }
}

# Manage failure replies
failure_route[MANAGE_FAILURE] {
    if (t_is_canceled()) {
        exit;
    }
    
    xlog("L_INFO", "Call failed: $T_reply_code $T_reply_reason\n");
}

# WebSocket event route
event_route[websocket:closed] {
    xlog("L_INFO", "WebSocket connection closed from $si:$sp\n");
}
